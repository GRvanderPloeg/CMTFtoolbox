[{"path":"https://grvanderploeg.com/CMTFtoolbox/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 CMTFtoolbox authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/articles/AP.html","id":"acmtf","dir":"Articles","previous_headings":"","what":"ACMTF","title":"AP","text":"","code":"# Microbiome processedMicrobiome = CMTFtoolbox::Georgiou2025$Tooth_microbiome  # Remove samples due to low library size mask = rowSums(processedMicrobiome$data) > 6500 processedMicrobiome$data = processedMicrobiome$data[mask,] processedMicrobiome$mode1 = processedMicrobiome$mode1[mask,]  # Remove duplicate samples mask = !(processedMicrobiome$mode1$SampleID %in% c(\"A11-8 36\", \"A11-10 17\", \"A11-15 17\")) processedMicrobiome$data = processedMicrobiome$data[mask,] processedMicrobiome$mode1 = processedMicrobiome$mode1[mask,]  # Also remove subject A11-8 due to being an outlier processedMicrobiome$data = processedMicrobiome$data[-23,,] processedMicrobiome$mode1 = processedMicrobiome$mode1[-23,]  # CLR transformation df = processedMicrobiome$data + 1 geomeans = pracma::geomean(as.matrix(df), dim=2) df_clr = log(sweep(df, 1, geomeans, FUN=\"/\"))  # Feature filtering sparsityThreshold = 0.5 maskA = processedMicrobiome$mode1$PainS_NopainA == \"A\" maskS = processedMicrobiome$mode1$PainS_NopainA == \"S\"  dfA = processedMicrobiome$data[maskA,] dfS = processedMicrobiome$data[maskS,]  sparsityA = colSums(dfA == 0) / nrow(dfA) sparsityS = colSums(dfS == 0) / nrow(dfS)  mask = (sparsityA <= sparsityThreshold) | (sparsityS <= sparsityThreshold)  processedMicrobiome$data = df_clr[,mask] processedMicrobiome$mode2 = processedMicrobiome$mode2[mask,]  # Center and scale processedMicrobiome$data = sweep(processedMicrobiome$data, 2, colMeans(processedMicrobiome$data), FUN=\"-\") processedMicrobiome$data = sweep(processedMicrobiome$data, 2, apply(processedMicrobiome$data, 2, sd), FUN=\"/\")  # Cytokines processedCytokines_case = CMTFtoolbox::Georgiou2025$Inflammatory_mediators  # Select only case subjects mask = processedCytokines_case$mode1$case_control == \"case\" processedCytokines_case$data = processedCytokines_case$data[mask,,] processedCytokines_case$mode1 = processedCytokines_case$mode1[mask,]  # Select only samples with corresponding microbiome data mask = processedCytokines_case$mode1$SubjectID %in% processedMicrobiome$mode1$SubjectID processedCytokines_case$data = processedCytokines_case$data[mask,,] processedCytokines_case$mode1 = processedCytokines_case$mode1[mask,]  processedCytokines_case$data = log(processedCytokines_case$data + 0.005) processedCytokines_case$data = multiwayCenter(processedCytokines_case$data, 1) processedCytokines_case$data = multiwayScale(processedCytokines_case$data, 2)  # Prep data datasets = list(processedCytokines_case$data, as.matrix(processedMicrobiome$data)) modes = list(c(1,2,3),c(1,4)) Z = setupCMTFdata(datasets, modes, normalize=TRUE) # Too computationally intensive. acmtf_model = CMTFtoolbox::acmtf_opt(Z, 2, nstart = 10, method=\"L-BFGS\", numCores=10) lambda = abs(acmtf_model$Fac[[5]]) colnames(lambda) = paste0(\"C\", 1:2)  lambda %>%   as_tibble() %>%   mutate(block=c(\"cytokines\", \"microbiome\")) %>%   mutate(block=factor(block, levels=c(\"cytokines\", \"microbiome\"))) %>%   pivot_longer(-block) %>%   ggplot(aes(x=as.factor(name),y=value,fill=as.factor(block))) +   geom_bar(stat=\"identity\",position=position_dodge(),col=\"black\") +   xlab(\"ACMTF component number\") +   ylab(expression(lambda)) +   scale_x_discrete(labels=1:3) +   scale_fill_manual(name=\"Dataset\",values = hue_pal()(2),labels=c(\"Inflammatory mediators\", \"Tooth microbiome\")) +   theme(legend.position=\"top\", text=element_text(size=16)) df = processedCytokines_case$mode1 %>% mutate(V1=acmtf_model$Fac[[1]][,1],V2=acmtf_model$Fac[[1]][,2]) %>% mutate(Gender = as.numeric(as.factor(Gender)), PainS_NopainA = as.numeric(as.factor(PainS_NopainA))) summary(lm(V1 ~ Gender + PainS_NopainA, data=df)) #>  #> Call: #> lm(formula = V1 ~ Gender + PainS_NopainA, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.21124 -0.09583 -0.03519  0.07407  0.31275  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   -0.64875    0.13502  -4.805 0.000108 *** #> Gender         0.15494    0.06195   2.501 0.021190 *   #> PainS_NopainA  0.28024    0.06148   4.558 0.000191 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.1472 on 20 degrees of freedom #> Multiple R-squared:  0.5671, Adjusted R-squared:  0.5238  #> F-statistic:  13.1 on 2 and 20 DF,  p-value: 0.0002311 summary(lm(V2 ~ Gender + PainS_NopainA, data=df)) #>  #> Call: #> lm(formula = V2 ~ Gender + PainS_NopainA, data = df) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -0.40028 -0.14344  0.01718  0.13641  0.35876  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|) #> (Intercept)   -0.04116    0.19947  -0.206    0.839 #> Gender         0.08208    0.09152   0.897    0.380 #> PainS_NopainA -0.05142    0.09083  -0.566    0.578 #>  #> Residual standard error: 0.2174 on 20 degrees of freedom #> Multiple R-squared:  0.05506,    Adjusted R-squared:  -0.03944  #> F-statistic: 0.5826 on 2 and 20 DF,  p-value: 0.5676"},{"path":"https://grvanderploeg.com/CMTFtoolbox/articles/AP.html","id":"acmtf-r","dir":"Articles","previous_headings":"","what":"ACMTF-R","title":"AP","text":"","code":"Y = as.numeric(as.factor(processedCytokines_case$mode1$PainS_NopainA)) Ycnt = Y - mean(Y) Ynorm = Ycnt / norm(Ycnt, \"2\") Ynorm = as.matrix(Ynorm) # Too computationally intensive. acmtfr_model90 = CMTFtoolbox::acmtfr_opt(Z, Ynorm, 1, pi=0.90, nstart = 10, method=\"L-BFGS\", numCores=10) lambda = abs(acmtfr_model90$Fac[[5]]) colnames(lambda) = paste0(\"C\", 1)  lambda %>%   as_tibble() %>%   mutate(block=c(\"cytokines\", \"microbiome\")) %>%   mutate(block=factor(block, levels=c(\"cytokines\", \"microbiome\"))) %>%   pivot_longer(-block) %>%   ggplot(aes(x=as.factor(name),y=value,fill=as.factor(block))) +   geom_bar(stat=\"identity\",position=position_dodge(),col=\"black\") +   xlab(\"ACMTF-R component number\") +   ylab(expression(lambda)) +   scale_x_discrete(labels=1:3) +   scale_fill_manual(name=\"Dataset\",values = hue_pal()(2),labels=c(\"Inflammatory mediators\", \"Tooth microbiome\")) +   theme(legend.position=\"top\", text=element_text(size=16)) df = processedCytokines_case$mode1 %>% mutate(V1=acmtfr_model90$Fac[[1]][,1],) %>% mutate(Gender = as.numeric(as.factor(Gender)), PainS_NopainA = as.numeric(as.factor(PainS_NopainA))) summary(lm(V1 ~ Gender + PainS_NopainA, data=df)) #>  #> Call: #> lm(formula = V1 ~ Gender + PainS_NopainA, data = df) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.192779 -0.058594 -0.001544  0.046445  0.210357  #>  #> Coefficients: #>               Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   -0.69489    0.09292  -7.478 3.25e-07 *** #> Gender         0.10032    0.04264   2.353    0.029 *   #> PainS_NopainA  0.36254    0.04231   8.568 3.97e-08 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.1013 on 20 degrees of freedom #> Multiple R-squared:  0.7949, Adjusted R-squared:  0.7744  #> F-statistic: 38.76 on 2 and 20 DF,  p-value: 1.316e-07"},{"path":"https://grvanderploeg.com/CMTFtoolbox/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction","text":"vignette showcase general use case Coupled Matrix Tensor Factorization (CMTF) models set data simulations.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/articles/Introduction.html","id":"general-tensor-matrix-case","dir":"Articles","previous_headings":"","what":"General tensor-matrix case","title":"Introduction","text":"First simulate case tensor (size 108 x 100 x 10) matrix (size 108 x 100) data obtained, measured 108 ‘subjects’ (mode 1). create random loadings modes corresponding two-component CMTF model. run cmtf_opt() function using two left vectors SVD tensors initial guess. finds correct solution pretty quickly. Note random initialization also possible, take longer converge. f-value result corresponds CMTF loss function value, low case: 1.8945834^{-8}. solution found using 52 iterations. visually verify result plot . Note negative correlations may observed due component flipping, similar Principal Component Analysis alter description found subspace. also difference magnitude simulated components modelled components due CMTF penalizing size vectors.","code":"tensorMatrixData = simTensorMatrixData(I=108, J=100, K=10, L=100, numComponents=2) result_nvec = cmtf_opt(tensorMatrixData$Z, 2, initialization=\"nvec\") a = cbind(tensorMatrixData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 1\") + ggtitle(\"Subject mode (shared)\") + stat_cor() #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if #> `.name_repair` is omitted as of tibble 2.0.0. #> ℹ Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. b = cbind(tensorMatrixData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X1\") + stat_cor() c = cbind(tensorMatrixData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Condition mode X1\") + stat_cor() d = cbind(tensorMatrixData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X2\") + stat_cor()  e = cbind(tensorMatrixData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 2\") + stat_cor() f = cbind(tensorMatrixData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() g = cbind(tensorMatrixData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() h = cbind(tensorMatrixData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor()  ggarrange(a,b,c,d,e,f,g,h, nrow=2, ncol=4)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/articles/Introduction.html","id":"general-two-tensor-case","dir":"Articles","previous_headings":"","what":"General two-tensor case","title":"Introduction","text":"create two tensor datasets sharing subject mode randomly initialized loadings corresponding two components. run cmtf_opt() function using two left vectors SVD tensors initial guess. finds correct solution pretty quickly. f-value result corresponds CMTF loss function value, low case: 6.671611^{-9}. solution found using 22 iterations. visually verify result plot . Note negative correlations may observed due component flipping, similar Principal Component Analysis alter description found subspace. also difference magnitude simulated components modelled components due CMTF penalizing size vectors. concludes brief introduction applying cmtf_opt various types data. -depth analysis robustness towards noise, refer Acar et al., 2011, provides framework replicate CMTF_noise_simulation vignette.","code":"twoTensorData = simTwoTensorData(I=108, J=100, K=10, L=100, M=10, numComponents=2) result_nvec = cmtf_opt(twoTensorData$Z, 2, initialization=\"nvec\") a = cbind(twoTensorData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 1\") + ggtitle(\"Subject mode (shared)\") + stat_cor() b = cbind(twoTensorData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X1\") + stat_cor() c = cbind(twoTensorData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Condition mode X1\") + stat_cor() d = cbind(twoTensorData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X2\") + stat_cor() e = cbind(twoTensorData$E, result_nvec$Fac[[5]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Condition mode X2\") + stat_cor()  f = cbind(twoTensorData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 2\") + stat_cor() g = cbind(twoTensorData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() h = cbind(twoTensorData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() i = cbind(twoTensorData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() j = cbind(twoTensorData$E, result_nvec$Fac[[5]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor()  ggarrange(a,b,c,d,e,f,g,h,i,j, nrow=2, ncol=5)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Geert Roelof van der Ploeg. Author, maintainer. Johan Westerhuis. Contributor. Anna Heintz-Buschart. Contributor. Age Smilde. Contributor. University Amsterdam. Copyright holder, funder.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van der Ploeg G (2025). CMTFtoolbox: Create (Advanced) Coupled Matrix Tensor Factorization Models. R package version 0.1.0, https://grvanderploeg.com/CMTFtoolbox/.","code":"@Manual{,   title = {CMTFtoolbox: Create (Advanced) Coupled Matrix and Tensor Factorization Models},   author = {Geert Roelof {van der Ploeg}},   year = {2025},   note = {R package version 0.1.0},   url = {https://grvanderploeg.com/CMTFtoolbox/}, }"},{"path":[]},{"path":"https://grvanderploeg.com/CMTFtoolbox/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create (Advanced) Coupled Matrix and Tensor Factorization Models","text":"CMTFtoolbox package provides R users two data fusion methods previously presented MATLAB sphere. cmtf_opt: Coupled Matrix Tensor Factorization (CMTF) (doi:10.48550/arXiv.1105.3422). acmtf_opt: Advanced Coupled Matrix Tensor Factorization (ACMTF) (doi:10.1186/1471-2105-15-239). acmtfr_opt: ACMTF-regression (ACMTF-R) described van der Ploeg et al., 2025 (see citation ). methods implemented using --optimization approaches described papers . implementation achieved using S4 Tensor object rTensor various conjugate gradient approaches mize. features package include: ACMTF_modelSelection: Combined random initialization cross-validation approach determining correct number components ACMTF. ACMTFR_modelSelection: Combined random initialization cross-validation approach determining correct number components ACMTF-R. npred: Prediction Y new sample using existing ACMTF-R model. Georgiou2025: example dataset containing tensor inflammatory mediator data matrix tooth microbiome data cohort apical periodontitis patients (doi:10.1111/iej.13854 doi:10.1111/iej.13912).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create (Advanced) Coupled Matrix and Tensor Factorization Models","text":"CMTFtoolbox package can installed CRAN using:","code":"install.packages(\"CMTFtoolbox\")"},{"path":"https://grvanderploeg.com/CMTFtoolbox/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"Create (Advanced) Coupled Matrix and Tensor Factorization Models","text":"can install development version CMTFtoolbox GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"GRvanderPloeg/CMTFtoolbox\")"},{"path":"https://grvanderploeg.com/CMTFtoolbox/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Create (Advanced) Coupled Matrix and Tensor Factorization Models","text":"Please use following citation using package: van der Ploeg, G. R., White, F. T. G., Jakobsen, R. R., Westerhuis, J., Heintz-Buschart, ., & Smilde, . (2024). ACMTF-R: supervised multi-omics data integration uncovering shared distinct outcome-associated variation. bioRxiv. 2025-07","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create (Advanced) Coupled Matrix and Tensor Factorization Models","text":"","code":"library(CMTFtoolbox)  set.seed(123) numComponents = 3 I = 108 J = 100 K = 10 L = 100 A = array(rnorm(I*numComponents), c(I, numComponents))  # shared subject mode B = array(rnorm(J*numComponents), c(J, numComponents))  # distinct feature mode of X1 C = array(rnorm(K*numComponents), c(K, numComponents))  # distinct condition mode of X1 D = array(rnorm(L*numComponents), c(L, numComponents))  # distinct feature mode of X2 Y = matrix(A[,1]) lambdas = array(c(1, 1, 1, 0, 0, 1), c(2,3))  df1 = array(0L, c(I, J, K)) df2 = array(0L, c(I, L)) for(i in 1:numComponents){   df1 = df1 + lambdas[1,i] * reinflateTensor(A[,i], B[,i], C[,i])   df2 = df2 + lambdas[2,i] * reinflateMatrix(A[,i], D[,i]) } datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4)) Z = setupCMTFdata(datasets, modes, normalize=TRUE)  cmtf_model = cmtf_opt(Z, 3) acmtf_model = acmtf_opt(Z, 3) acmtfr_model = acmtfr_opt(Z, Y, 3)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTFR_modelSelection.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for ACMTFR — ACMTFR_modelSelection","title":"Model selection for ACMTFR — ACMTFR_modelSelection","text":"Model selection ACMTFR","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTFR_modelSelection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for ACMTFR — ACMTFR_modelSelection","text":"","code":"ACMTFR_modelSelection(   datasets,   modes,   Y,   sharedMode = 1,   maxNumComponents = 5,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5,   normalize = TRUE,   normY = 1,   method = \"CG\",   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 10000,   abs_tol = 1e-10,   rel_tol = 1e-10,   grad_tol = 1e-10,   nstart = 5,   numCores = 1,   cvFolds = 2 )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTFR_modelSelection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for ACMTFR — ACMTFR_modelSelection","text":"datasets List arrays datasets. Multi-way two-way may combined. modes Numbered modes per dataset list. Example element 1: 1 2 3 element 2: 1 4 X tensor Y matrix case shared subject mode. Y Dependent variable (regression part). sharedMode Mode shared blocks, used remove fibers numFolds randomly initialized models. maxNumComponents Maximum number components check (default 3). alpha Scalar penalizing components norm 1 (default 1). beta Vector penalty values dataset, penalizing lambda terms (default 1e-3). epsilon Scalar value make possible compute partial derivatives lambda (default 1e-8). pi Pi value loss function specified Van der Ploeg et al., 2025. normalize Normalize X blocks frobenius norm 1 (default TRUE). normY Normalize Y specific value, (default: 1). method Optimization method use (default = \"CG\", conjugate gradient). See mize::mize() options. cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. abs_tol Function tolerance criterion convergence. rel_tol Relative function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector. nstart Number models produce (default 1). set higher one, package return best fitted model. numCores Number cores use (default 1). set higher one, package attempt run parallel. cvFolds Number CV folds create (default 10).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTFR_modelSelection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model selection for ACMTFR — ACMTFR_modelSelection","text":"List object containing plots metrics dataframes containing data used create .","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTFR_modelSelection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for ACMTFR — ACMTFR_modelSelection","text":"","code":"set.seed(123)  I = 10 J = 5 K = 3 df = array(rnorm(I*J*K), c(I,J,K)) df2 = array(rnorm(I*J*K), c(I,J,K)) datasets = list(df, df2) modes = list(c(1,2,3), c(1,4,5)) Y = as.matrix(rnorm(I))  # A very small procedure is run to limit computational requirements result = ACMTFR_modelSelection(datasets,                               modes,                               Y,                               pi=1.0,                               maxNumComponents=2,                               nstart=2,                               cvFolds=2,                               rel_tol=0.5,                               abs_tol=0.5)  result$plots$overview"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTF_modelSelection.html","id":null,"dir":"Reference","previous_headings":"","what":"Model selection for ACMTF — ACMTF_modelSelection","title":"Model selection for ACMTF — ACMTF_modelSelection","text":"Model selection ACMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTF_modelSelection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model selection for ACMTF — ACMTF_modelSelection","text":"","code":"ACMTF_modelSelection(   datasets,   modes,   maxNumComponents = 3,   sharedMode = 1,   alpha = 1,   beta = rep(0.001, length(datasets)),   epsilon = 1e-08,   nstart = 10,   cvFolds = 10,   numCores = 1,   method = \"CG\",   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 1e+05,   rel_tol = 1e-08,   abs_tol = 1e-08,   grad_tol = 1e-08 )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTF_modelSelection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model selection for ACMTF — ACMTF_modelSelection","text":"datasets List arrays datasets. Multi-way two-way may combined. modes Numbered modes per dataset list. Example element 1: 1 2 3 element 2: 1 4 X tensor Y matrix case shared subject mode. maxNumComponents Maximum number components check (default 3). sharedMode Mode shared blocks, used remove fibers numFolds randomly initialized models. alpha Scalar penalizing components norm 1 (default 1). beta Vector penalty values dataset, penalizing lambda terms (default 1e-3). epsilon Scalar value make possible compute partial derivatives lambda (default 1e-8). nstart Number randomly initialized models create (default 10). cvFolds Number CV folds create (default 10). numCores Number cores use (default 1). number higher 1 run process parallel. method Optimization method use (default = \"CG\", conjugate gradient). See mize::mize() options. cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. rel_tol Relative function tolerance criterion convergence. abs_tol Function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTF_modelSelection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model selection for ACMTF — ACMTF_modelSelection","text":"List object containing plots metrics dataframes containing data used create .","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/ACMTF_modelSelection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model selection for ACMTF — ACMTF_modelSelection","text":"","code":"set.seed(123)  I = 10 J = 5 K = 3 df = array(rnorm(I*J*K), c(I,J,K)) df2 = array(rnorm(I*J*K), c(I,J,K)) datasets = list(df, df2) modes = list(c(1,2,3), c(1,4,5))  # A very small procedure is run to limit computational requirements result = ACMTF_modelSelection(datasets,                               modes,                               maxNumComponents=2,                               nstart=2,                               cvFolds=2,                               rel_tol=1e-2,                               abs_tol=1e-2)  result$plots$overview"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Factor Match Score for two models. — FMS_cv","title":"Compute Factor Match Score for two models. — FMS_cv","text":"Compute Factor Match Score two models.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Factor Match Score for two models. — FMS_cv","text":"","code":"FMS_cv(Fac1, Fac2, sharedMode = 1)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Factor Match Score for two models. — FMS_cv","text":"Fac1 list matrices corresponding found components per mode model 1. Fac2 list matrices corresponding found components per mode model 2. sharedMode shared mode excluded FMS calculation.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Factor Match Score for two models. — FMS_cv","text":"Scalar FMS value","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_cv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Factor Match Score for two models. — FMS_cv","text":"","code":"set.seed(123)  I = 10 J = 5 K = 3 df = array(rnorm(I*J*K), c(I,J,K)) datasets = list(df, df) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes)  model1 = acmtf_opt(Z, 1)  Fac1 = model1$Fac[1:3] Fac2 = Fac1 # identical models for the purposes of demonstration result = FMS_cv(Fac1, Fac2) # [1] 1"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Factor Match Score for two models. — FMS_random","title":"Compute Factor Match Score for two models. — FMS_random","text":"Compute Factor Match Score two models.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Factor Match Score for two models. — FMS_random","text":"","code":"FMS_random(Fac1, Fac2)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Factor Match Score for two models. — FMS_random","text":"Fac1 list matrices corresponding found components per mode model 1. Fac2 list matrices corresponding found components per mode model 2.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Factor Match Score for two models. — FMS_random","text":"Scalar FMS value","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/FMS_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Factor Match Score for two models. — FMS_random","text":"","code":"set.seed(123)  I = 10 J = 5 K = 3 df = array(rnorm(I*J*K), c(I,J,K)) datasets = list(df, df) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes)  model1 = acmtf_opt(Z, 1)  Fac1 = model1$Fac[1:3] Fac2 = Fac1 # identical models for the purposes of demonstration result = FMS_random(Fac1, Fac2) # [1] 1"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/Georgiou2025.html","id":null,"dir":"Reference","previous_headings":"","what":"Georgiou2025 Apical Periodontitis data — Georgiou2025","title":"Georgiou2025 Apical Periodontitis data — Georgiou2025","text":"Georgiou longitudinal dataset three-dimensional array matrix, subjects mode 1, features mode 2, time mode3.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/Georgiou2025.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Georgiou2025 Apical Periodontitis data — Georgiou2025","text":"","code":"Georgiou2025"},{"path":[]},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/Georgiou2025.html","id":"georgiou-","dir":"Reference","previous_headings":"","what":"Georgiou2025","title":"Georgiou2025 Apical Periodontitis data — Georgiou2025","text":"list object two elements Inflammatory_mediators Longitudinally measured inflammatory mediator data. Tooth_microbiome Single-timepoint tooth microbiome data extracted tooth","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/Georgiou2025.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Georgiou2025 Apical Periodontitis data — Georgiou2025","text":"TBD","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fg.html","id":null,"dir":"Reference","previous_headings":"","what":"Function value and gradient calculation for ACMTF — acmtf_fg","title":"Function value and gradient calculation for ACMTF — acmtf_fg","text":"Function value gradient calculation ACMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function value and gradient calculation for ACMTF — acmtf_fg","text":"","code":"acmtf_fg(x, Z, alpha = 1, beta = rep(0.001, length(Z$object)), epsilon = 1e-08)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function value and gradient calculation for ACMTF — acmtf_fg","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function value and gradient calculation for ACMTF — acmtf_fg","text":"list containing function (\"fn\") gradient (\"gr\").","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function value and gradient calculation for ACMTF — acmtf_fg","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeACMTF(Z, 2, output=\"vect\") outcome = acmtf_fg(init, Z) f = outcome$fn g = outcome$gr"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate function value of ACMTF — acmtf_fun","title":"Calculate function value of ACMTF — acmtf_fun","text":"Calculate function value ACMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate function value of ACMTF — acmtf_fun","text":"","code":"acmtf_fun(   x,   Z,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   manual = FALSE )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate function value of ACMTF — acmtf_fun","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014 manual Manual calculation loss term (default FALSE)","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate function value of ACMTF — acmtf_fun","text":"Scalar loss function value (manual=FALSE), otherwise list containing loss terms","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate function value of ACMTF — acmtf_fun","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeACMTF(Z, 2, output=\"vect\") f = acmtf_fun(init, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradient of ACMTF model. — acmtf_gradient","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"Calculate gradient ACMTF model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"","code":"acmtf_gradient(   x,   Z,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08 )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"Vectorized gradient ACMTF model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeACMTF(Z, 2, output=\"vect\") g = acmtf_gradient(init, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Advanced coupled matrix and tensor factorizations — acmtf_opt","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"Advanced coupled matrix tensor factorizations","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"","code":"acmtf_opt(   Z,   numComponents,   initialization = \"random\",   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   method = \"CG\",   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 10000,   abs_tol = 1e-10,   rel_tol = 1e-10,   grad_tol = 1e-10,   nstart = 1,   numCores = 1,   sortComponents = TRUE,   allOutput = FALSE )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"Z Combined dataset mode object produced setupCMTFdata(). numComponents Number components initialization Initialization, either \"random\" (default) \"nvec\" numComponents components concatenated data using svd. alpha Scalar penalizing components norm 1 (default 1). beta Vector penalty values dataset, penalizing lambda terms (default 1e-3). epsilon Scalar value make possible compute partial derivatives lambda (default 1e-8). method Optimization method use (default = \"CG\", conjugate gradient). See mize::mize() options. cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. abs_tol Function tolerance criterion convergence. rel_tol Relative function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector. nstart Number models produce (default 1). set higher one, package return best fitted model. numCores Number cores use (default 1). set higher one, package attempt run parallel. sortComponents Sort components output descending order variation explained. allOutput Return created models. Ignored nstart=1.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"List object, similar mize::mize() output. Includes Fac object model, list components per mode. Also includes init object giving initialized input vectors.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtf_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  # specific setting to reduce runtime for CRAN model = acmtf_opt(Z, 1, rel_tol=1e-5, abs_tol=1e-5)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate function value of ACMTF — acmtfr_fg","title":"Calculate function value of ACMTF — acmtfr_fg","text":"Calculate function value ACMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate function value of ACMTF — acmtfr_fg","text":"","code":"acmtfr_fg(   x,   Z,   Y,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5,   mu = 1e-06 )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate function value of ACMTF — acmtfr_fg","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). Y Dependent variable (regression part). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014 pi Pi value loss function specified Van der Ploeg et al., 2025. mu Ridge term parameter calculation regression coefficients rho (default = 1e-6).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate function value of ACMTF — acmtfr_fg","text":"Scalar loss function value (manual=FALSE), otherwise list containing loss terms.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate function value of ACMTF — acmtfr_fg","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE) Y = A[,1]  init = initializeACMTF(Z, 2, output=\"vect\") outcome = acmtfr_fg(init, Z, Y) f = outcome$fn g = outcome$gr"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate function value of ACMTF — acmtfr_fun","title":"Calculate function value of ACMTF — acmtfr_fun","text":"Calculate function value ACMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate function value of ACMTF — acmtfr_fun","text":"","code":"acmtfr_fun(   x,   Z,   Y,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5,   mu = 1e-06,   manual = FALSE )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate function value of ACMTF — acmtfr_fun","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). Y Dependent variable (regression part). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014 pi Pi value loss function specified Van der Ploeg et al., 2025. mu Ridge term parameter calculation regression coefficients rho (default = 1e-6). manual Manual calculation loss term (default FALSE).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate function value of ACMTF — acmtfr_fun","text":"Scalar loss function value (manual=FALSE), otherwise list containing loss terms.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate function value of ACMTF — acmtfr_fun","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE) Y = A[,1]  init = initializeACMTF(Z, 2, output=\"vect\") f = acmtfr_fun(init, Z, Y)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradient of ACMTF model. — acmtfr_gradient","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"Calculate gradient ACMTF model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"","code":"acmtfr_gradient(   x,   Z,   Y,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5,   mu = 1e-06 )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). Y Dependent variable (regression part). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014 pi Pi value loss function specified Van der Ploeg et al., 2025. mu Ridge term parameter calculation regression coefficients rho (default = 1e-6).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"Vectorized gradient ACMTF regression model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE) Y = A[,1]  init = initializeACMTF(Z, 2, output=\"vect\") g = acmtfr_gradient(init, Z, Y)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"Advanced coupled matrix tensor factorizations","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"","code":"acmtfr_opt(   Z,   Y,   numComponents,   initialization = \"random\",   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5,   mu = 1e-06,   method = \"CG\",   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 10000,   abs_tol = 1e-10,   rel_tol = 1e-10,   grad_tol = 1e-10,   nstart = 1,   numCores = 1,   sortComponents = TRUE,   allOutput = FALSE )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"Z Combined dataset mode object produced setupCMTFdata(). Y Dependent variable (regression part). numComponents Number components initialization Initialization, either \"random\" (default) \"nvec\" numComponents components concatenated data using svd. Ignored uses NPLS based initialization pi=0. alpha Scalar penalizing components norm 1 (default 1). beta Vector penalty values dataset, penalizing lambda terms (default 1e-3). epsilon Scalar value make possible compute partial derivatives lambda (default 1e-8). pi Pi value loss function specified Van der Ploeg et al., 2025. mu Ridge term parameter calculation regression coefficients rho (default = 1e-6). method Optimization method use (default = \"CG\", conjugate gradient). See mize::mize() options. cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. abs_tol Function tolerance criterion convergence. rel_tol Relative function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector. nstart Number models produce (default 1). set higher one, package return best fitted model. numCores Number cores use (default 1). set higher one, package attempt run parallel. sortComponents Sort components output descending order variation explained. allOutput Return created models. Ignored nstart=1.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"List object, similar mize::mize() output. Includes Fac object model, list components per mode. Also includes init object giving initialized input vectors.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/acmtfr_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) Y = A[,1] datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  # specific setting to reduce runtime for CRAN model = acmtfr_opt(Z, Y, 2, rel_tol=1e-5, abs_tol=1e-5)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fg.html","id":null,"dir":"Reference","previous_headings":"","what":"Function value and gradient calculation for CMTF — cmtf_fg","title":"Function value and gradient calculation for CMTF — cmtf_fg","text":"Function value gradient calculation CMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function value and gradient calculation for CMTF — cmtf_fg","text":"","code":"cmtf_fg(x, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function value and gradient calculation for CMTF — cmtf_fg","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata().","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function value and gradient calculation for CMTF — cmtf_fg","text":"list containing function (\"fn\") gradient (\"gr\").","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function value and gradient calculation for CMTF — cmtf_fg","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeCMTF(Z, 2, output=\"vect\") outcome = cmtf_fg(init, Z) f = outcome$fn g = outcome$gr"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate function value of CMTF — cmtf_fun","title":"Calculate function value of CMTF — cmtf_fun","text":"Calculate function value CMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate function value of CMTF — cmtf_fun","text":"","code":"cmtf_fun(x, Z, manual = FALSE)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate function value of CMTF — cmtf_fun","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). manual Manual calculation loss term (default FALSE)","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate function value of CMTF — cmtf_fun","text":"Function value CMTF loss value manual=FALSE, otherwise vector loss values per term.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate function value of CMTF — cmtf_fun","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeCMTF(Z, 2, output=\"vect\") f = cmtf_fun(init, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradient of CMTF model. — cmtf_gradient","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"Calculate gradient CMTF model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"","code":"cmtf_gradient(x, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata().","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"Vectorized gradient CMTF model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeCMTF(Z, 2, output=\"vect\") g = cmtf_gradient(init, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Coupled matrix and tensor factorizations — cmtf_opt","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"Coupled matrix tensor factorizations","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"","code":"cmtf_opt(   Z,   numComponents,   initialization = \"random\",   method = \"CG\",   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 10000,   abs_tol = 1e-08,   rel_tol = 1e-08,   grad_tol = 1e-08,   nstart = 1,   numCores = 1,   sortComponents = TRUE,   allOutput = FALSE )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"Z Combined dataset mode object produced setupCMTFdata(). numComponents Number components initialization Initialization, either \"random\" (default) \"nvec\" numComponents components concatenated data using svd. method Optimization method use (default = \"CG\", conjugate gradient). See mize::mize() options. cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. abs_tol Function tolerance criterion convergence. rel_tol Relative function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector. nstart Number models produce (default 1). set higher one, package return best fitted model. numCores Number cores use (default 1). set higher one, package attempt run parallel. sortComponents Sort components output descending order variation explained. allOutput Return created models. Ignored nstart=1.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"List object, similar mize::mize() output. Includes Fac object model, list components per mode. Also includes init object giving initialized input vectors.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/cmtf_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  model = cmtf_opt(Z, 1, rel_tol=1e-4) # quick convergence for example only"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/computeFMS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Factor Match Score for two models. — computeFMS","title":"Compute Factor Match Score for two models. — computeFMS","text":"Compute Factor Match Score two models.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/computeFMS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Factor Match Score for two models. — computeFMS","text":"","code":"computeFMS(Fac1, Fac2, modes)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/computeFMS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Factor Match Score for two models. — computeFMS","text":"Fac1 list matrices corresponding found components per mode model 1. Fac2 list matrices corresponding found components per mode model 2. modes List modes per dataset.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/computeFMS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Factor Match Score for two models. — computeFMS","text":"Vector FMS scores, one per dataset.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/computeFMS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Factor Match Score for two models. — computeFMS","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100, 2)) E = array(rnorm(10*2), c(10, 2))  Fac1 = list(A,B,C,D,E) Fac2 = Fac1 # identical models for the purposes of demonstration modes = list(c(1,2,3), c(1,4,5)) FMS_result = computeFMS(Fac1, Fac2, modes) # FMS_result = c(1,1)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/degenScore.html","id":null,"dir":"Reference","previous_headings":"","what":"degenScore — degenScore","title":"degenScore — degenScore","text":"Computes maximum absolute -diagonal Tucker congruence coefficient subject-mode components ACMTF model. metric serves diagnostic tool detect potential degeneracy subject-mode loadings.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/degenScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"degenScore — degenScore","text":"","code":"degenScore(A)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/degenScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"degenScore — degenScore","text":"numeric matrix subject-mode loadings (dimensions: subjects x components).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/degenScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"degenScore — degenScore","text":"numeric scalar representing maximum absolute -diagonal Tucker congruence components.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/degenScore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"degenScore — degenScore","text":"high degenScore (e.g., > 0.85) indicates two components subject mode highly similar, suggesting possible degeneracy lack uniqueness. low value (e.g., < 0.3) indicates well-separated components.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/degenScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"degenScore — degenScore","text":"","code":"# Example: Compute degenScore for a random loading matrix A <- matrix(rnorm(100), nrow = 10, ncol = 10) degenScore(A) #> [1] 0.6161486"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/fac_to_vect.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorize Fac object — fac_to_vect","title":"Vectorize Fac object — fac_to_vect","text":"Vectorize Fac object","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/fac_to_vect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorize Fac object — fac_to_vect","text":"","code":"fac_to_vect(Fac)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/fac_to_vect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorize Fac object — fac_to_vect","text":"Fac Fac object CMTF ACMTF","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/fac_to_vect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorize Fac object — fac_to_vect","text":"Vectorized Fac object","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/fac_to_vect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorize Fac object — fac_to_vect","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2)) Fac = list(A, B, C, D, E) v = fac_to_vect(Fac)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeACMTF.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"Initialize input vectors ACMTF algorithm","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeACMTF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"","code":"initializeACMTF(   Z,   numComponents,   initialization = \"random\",   output = \"Fac\",   Y = NULL )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeACMTF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"Z List object generated setupCMTFdata(). numComponents Integer stating number desired components CMTF model. initialization Initialization method, either \"random\" \"nvec\" (default \"random\"). Random initialize random input vectors. Nvec initialize vectors according singular value decomposition (matricized, needed) concatenated datasets per mode. output return output: \"Fac\" object (default) vectorized (\"vect\"). Y Used dependent variable initialization set \"npls\". used default.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeACMTF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"List vector initialized input vectors per mode.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeACMTF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeACMTF(Z, 2)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeCMTF.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize input vectors for the CMTF algorithm — initializeCMTF","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"Initialize input vectors CMTF algorithm","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeCMTF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"","code":"initializeCMTF(   Z,   numComponents,   initialization = \"random\",   output = \"Fac\",   Y = NULL )"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeCMTF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"Z List object generated setupCMTFdata(). numComponents Integer stating number desired components CMTF model. initialization Initialization method, either \"random\" \"nvec\" (default \"random\"). Random initialize random input vectors. Nvec initialize vectors according singular value decomposition (matricized, needed) concatenated datasets per mode. output return output: \"Fac\" object (default) vectorized (\"vect\"). Y Used dependent variable initialization set \"npls\". used default.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeCMTF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"List vector initialized input vectors per mode.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/initializeCMTF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeCMTF(Z, 1)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/normalizeFac.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"Normalize vectors model output Fac object norm 1.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/normalizeFac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"","code":"normalizeFac(Fac, modes)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/normalizeFac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"Fac List object components per mode per item. modes List object modes per dataset (see also setupCMTFdata())","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/normalizeFac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"List object normalized Fac object, extracted norms per loading vector per component, norms per dataset per component.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/normalizeFac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2)) modes = list(c(1,2,3), c(1,4,5))  Fac = list(A, B, C, D, E) output = normalizeFac(Fac, modes)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/npred.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Y for new data by projecting the data onto the latent space defined by an ACMTF-R model. — npred","title":"Predict Y for new data by projecting the data onto the latent space defined by an ACMTF-R model. — npred","text":"Predict Y new data projecting data onto latent space defined ACMTF-R model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/npred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Y for new data by projecting the data onto the latent space defined by an ACMTF-R model. — npred","text":"","code":"npred(model, newX, Z, sharedMode = 1)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/npred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Y for new data by projecting the data onto the latent space defined by an ACMTF-R model. — npred","text":"model ACMTF-R model newX List object new data, element corresponds block Z Original input data used model sharedMode Shared mode blocks (default 1).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/npred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Y for new data by projecting the data onto the latent space defined by an ACMTF-R model. — npred","text":"Ypred: predicted value Y new data","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/npred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Y for new data by projecting the data onto the latent space defined by an ACMTF-R model. — npred","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100, 2)) E = array(rnorm(10*2), c(10, 2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes) Y = matrix(A[,1]) # Remove a sample and define i = 1 Xtest = lapply(Z$object, function(x){x@data[i,,]}) Ytest = Y[i] Xtrain = lapply(Z$object, function(x){x@data[-i,,]}) Ytrain = Y[-i] Ztrain = setupCMTFdata(Xtrain, Z$modes) model = acmtfr_opt(Ztrain,Ytrain,1,initialization=\"random\",pi=1, nstart=1, max_iter=10) Ypred = npred(model, Xtest, Ztrain, sharedMode=1)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateFac.html","id":null,"dir":"Reference","previous_headings":"","what":"Reinflate all datablocks from a model Fac object. — reinflateFac","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"Basically wrapper function reinflateTensor() reinflateMatrix().","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateFac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"","code":"reinflateFac(Fac, Z, returnAsTensor = FALSE)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateFac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"Fac Fac object output CMTF ACMTF Z Z object generated setupCMTFdata(). returnAsTensor Boolean return data blocks rTensor tensor objects (default FALSE)","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateFac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"List data blocks","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateFac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  result = cmtf_opt(Z, 1, max_iter=2) Xhats = reinflateFac(result$Fac, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"Create matrix matrix scores loadings similar component model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"","code":"reinflateMatrix(A, B)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"x N matrix corresponding scores N components. B J x N matrix corresponding loadings N components.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"M, x J matrix.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"","code":"A = rnorm(108) B = rnorm(100) M = reinflateMatrix(A,B)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateTensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"Create tensor set matrices similar component model.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateTensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"","code":"reinflateTensor(A, B, C)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateTensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"x N matrix corresponding loadings first mode N components. B J x N matrix corresponding loadings second mode N components. C K x N matrix corresponding loadings third mode N components.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateTensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"M, x J x K tensor.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/reinflateTensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"","code":"A = rnorm(108) B = rnorm(100) C = rnorm(10) M = reinflateTensor(A,B,C)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/removeTwoNormCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove two-norms column-wise from a matrix — removeTwoNormCol","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"Remove two-norms column-wise matrix","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/removeTwoNormCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"","code":"removeTwoNormCol(df)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/removeTwoNormCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"df Matrix loadings","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/removeTwoNormCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"Matrix loadings column-wise 2-norm 1.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/removeTwoNormCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"","code":"A = array(rnorm(108*4), c(108,4)) Anorm = removeTwoNormCol(A)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/setupCMTFdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up datasets for (A)CMTF input — setupCMTFdata","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"Set datasets ()CMTF input","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/setupCMTFdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"","code":"setupCMTFdata(datasets, modes, normalize = TRUE)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/setupCMTFdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"datasets List arrays datasets. Multi-way two-way may combined. modes Numbered modes per dataset list. Example element 1: 1 2 3 element 2: 1 4 X tensor Y matrix case shared subject mode. normalize Boolean specifying datasets normalized Frobenium norm 1. Note: function puts zeroes positions missing values. indices missing data conserved output.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/setupCMTFdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"Z, list \"object\" listing datasets, \"sizes\" size, \"norms\" norms \"missing\" stating missing data.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/setupCMTFdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/vect_to_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"Convert vectorized output ()cmtf Fac list object loadings per mode.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/vect_to_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"","code":"vect_to_fac(vect, Z, sortComponents = FALSE)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/vect_to_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"vect Vectorized output ()cmtf Z Original Z input object (see setupCMTFdata). sortComponents Sort order components variation explained (default FALSE).","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/vect_to_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"Fac: list object loadings components per mode, ordered way Z$modes.","code":""},{"path":"https://grvanderploeg.com/CMTFtoolbox/reference/vect_to_fac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  result = cmtf_opt(Z, 2, initialization=\"random\", max_iter = 2) Fac = vect_to_fac(result$par, Z)"},{"path":"https://grvanderploeg.com/CMTFtoolbox/news/index.html","id":"cmtftoolbox-010","dir":"Changelog","previous_headings":"","what":"CMTFtoolbox 0.1.0","title":"CMTFtoolbox 0.1.0","text":"Added NEWS.md. Initial CRAN submission.","code":""}]
