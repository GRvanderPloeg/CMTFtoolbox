[{"path":"https://grvanderploeg.github.io/CMTFtoolbox/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 CMTFtoolbox authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/articles/ACMTF_simulation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ACMTF_simulation","text":"vignette compare Advanced Coupled Matrix Tensor Factorization (ACMTF) Coupled Matrix Tensor Factorization (CMTF) using simulation described case 1 Acar et al., 2014. Due limitations computational time allowed render vignette, create 3 randomly initialized models use slightly less strict convergence parameters. create random components reinflate data blocks. add 5% noise data block make error structure bit complicated. number shared distinct components differ per simulation.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/articles/ACMTF_simulation.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"ACMTF_simulation","text":"create tensor matrix linked subject mode λ\\lambda = [1 0 1] σ\\sigma = [1 1 0], meaning component 1 shared blocks, component 2 distinct matrix component 3 distinct tensor.","code":"set.seed(123)  R = 3 I = 50 J = 30 K = 40 M = 20 modes = list(c(1,2,3), c(1,4))  A = array(rnorm(I*R), c(I, R))  # shared subject mode Anorm = sweep(A, 2, apply(A, 2, function(x){norm(as.matrix(x), \"F\")}), FUN=\"/\") B = array(rnorm(J*R), c(J, R))  # distinct feature mode of X1 Bnorm = sweep(B, 2, apply(B, 2, function(x){norm(as.matrix(x), \"F\")}), FUN=\"/\") C = array(rnorm(K*R), c(K, R))  # distinct condition mode of X1 Cnorm = sweep(C, 2, apply(C, 2, function(x){norm(as.matrix(x), \"F\")}), FUN=\"/\") D = array(rnorm(M*R), c(M, R))  # distinct feature mode of X2 Dnorm = sweep(D, 2, apply(D, 2, function(x){norm(as.matrix(x), \"F\")}), FUN=\"/\")  lambdas = array(c(1, 1, 0, 1, 1, 0), c(2,3))  df1 = array(0L, c(I, J, K)) df2 = array(0L, c(I, M)) for(i in 1:R){   df1 = df1 + lambdas[1,i] * reinflateTensor(Anorm[,i], Bnorm[,i], Cnorm[,i])   df2 = df2 + lambdas[2,i] * reinflateMatrix(Anorm[,i], Dnorm[,i]) } df1 = as.tensor(df1) df2 = as.tensor(df2)  # Add noise df1_noise = as.tensor(array(rnorm(I*J*K), c(I,J,K))) df2_noise = as.tensor(array(rnorm(I*M), c(I,M)))  X1 = df1 + 0.05 * df1_noise * fnorm(df1) / fnorm(df1_noise) X2 = df2 + 0.05 * df2_noise * fnorm(df2) / fnorm(df2_noise)  datasets = list(X1@data, X2@data) Z = setupCMTFdata(datasets, modes, normalize=TRUE) cmtf_result = cmtf_opt(Z, 3, nstart=3, rel_tol=1e-8, grad_tol=1e-8, allOutput=TRUE) acmtf_result = acmtf_opt(Z, 3, nstart=3, rel_tol=1e-8, grad_tol=1e-8, allOutput=TRUE) sideBySidePlot(Anorm, cmtf_result, acmtf_result, Z) ## New names: ## • `postprocessModel(Anorm, cmtf_result[[i]]$Fac, Z)$matchScore` -> ##   `postprocessModel(Anorm, cmtf_result[[i]]$Fac, Z)$matchScore...1` ## • `postprocessModel(Anorm, cmtf_result[[i]]$Fac, Z)$matchScore` -> ##   `postprocessModel(Anorm, cmtf_result[[i]]$Fac, Z)$matchScore...2` ## • `postprocessModel(Anorm, cmtf_result[[i]]$Fac, Z)$matchScore` -> ##   `postprocessModel(Anorm, cmtf_result[[i]]$Fac, Z)$matchScore...3` ## Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if ## `.name_repair` is omitted as of tibble 2.0.0. ## ℹ Using compatibility `.name_repair`. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. ## New names: ## `summarise()` has grouped output by 'type'. You can override using the ## `.groups` argument. ## `summarise()` has grouped output by 'type'. You can override using the ## `.groups` argument. ## • `postprocessModel(Anorm, acmtf_result[[i]]$Fac, Z)$matchScore` -> ##   `postprocessModel(Anorm, acmtf_result[[i]]$Fac, Z)$matchScore...1` ## • `postprocessModel(Anorm, acmtf_result[[i]]$Fac, Z)$matchScore` -> ##   `postprocessModel(Anorm, acmtf_result[[i]]$Fac, Z)$matchScore...2` ## • `postprocessModel(Anorm, acmtf_result[[i]]$Fac, Z)$matchScore` -> ##   `postprocessModel(Anorm, acmtf_result[[i]]$Fac, Z)$matchScore...3`"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/articles/CMTF_simulation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CMTF_simulation","text":"vignette showcase general use case Coupled Matrix Tensor Factorization (CMTF) models set data simulations.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/articles/CMTF_simulation.html","id":"general-tensor-matrix-case","dir":"Articles","previous_headings":"","what":"General tensor-matrix case","title":"CMTF_simulation","text":"First simulate case tensor (size 108 x 100 x 10) matrix (size 108 x 100) data obtained, measured 108 ‘subjects’ (mode 1). create random loadings modes corresponding two-component CMTF model. run cmtf_opt() function using two left vectors SVD tensors initial guess. finds correct solution pretty quickly. Note random initialization also possible, take longer converge. f-value result corresponds CMTF loss function value, low case: 1.8945834^{-8}. solution found using 52 iterations. visually verify result plot . Note negative correlations may observed due component flipping, similar Principal Component Analysis alter description found subspace. also difference magnitude simulated components modelled components due CMTF penalizing size vectors.","code":"tensorMatrixData = simTensorMatrixData(I=108, J=100, K=10, L=100, numComponents=2) result_nvec = cmtf_opt(tensorMatrixData$Z, 2, initialization=\"nvec\") a = cbind(tensorMatrixData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 1\") + ggtitle(\"Subject mode (shared)\") + stat_cor() #> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if #> `.name_repair` is omitted as of tibble 2.0.0. #> ℹ Using compatibility `.name_repair`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. b = cbind(tensorMatrixData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X1\") + stat_cor() c = cbind(tensorMatrixData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Condition mode X1\") + stat_cor() d = cbind(tensorMatrixData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X2\") + stat_cor()  e = cbind(tensorMatrixData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 2\") + stat_cor() f = cbind(tensorMatrixData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() g = cbind(tensorMatrixData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() h = cbind(tensorMatrixData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor()  ggarrange(a,b,c,d,e,f,g,h, nrow=2, ncol=4)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/articles/CMTF_simulation.html","id":"general-two-tensor-case","dir":"Articles","previous_headings":"","what":"General two-tensor case","title":"CMTF_simulation","text":"create two tensor datasets sharing subject mode randomly initialized loadings corresponding two components. run cmtf_opt() function using two left vectors SVD tensors initial guess. finds correct solution pretty quickly. f-value result corresponds CMTF loss function value, low case: 6.671611^{-9}. solution found using 22 iterations. visually verify result plot . Note negative correlations may observed due component flipping, similar Principal Component Analysis alter description found subspace. also difference magnitude simulated components modelled components due CMTF penalizing size vectors. concludes brief introduction applying cmtf_opt various types data. -depth analysis robustness towards noise, refer Acar et al., 2011, provides framework replicate CMTF_noise_simulation vignette.","code":"twoTensorData = simTwoTensorData(I=108, J=100, K=10, L=100, M=10, numComponents=2) result_nvec = cmtf_opt(twoTensorData$Z, 2, initialization=\"nvec\") a = cbind(twoTensorData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 1\") + ggtitle(\"Subject mode (shared)\") + stat_cor() b = cbind(twoTensorData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X1\") + stat_cor() c = cbind(twoTensorData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Condition mode X1\") + stat_cor() d = cbind(twoTensorData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V2, y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Feature mode X2\") + stat_cor() e = cbind(twoTensorData$E, result_nvec$Fac[[5]]) %>% as_tibble() %>% ggplot(aes(x=V2,y=V3)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + ggtitle(\"Condition mode X2\") + stat_cor()  f = cbind(twoTensorData$A, result_nvec$Fac[[1]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"CMTF component 2\") + stat_cor() g = cbind(twoTensorData$B, result_nvec$Fac[[2]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() h = cbind(twoTensorData$C, result_nvec$Fac[[3]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() i = cbind(twoTensorData$D, result_nvec$Fac[[4]]) %>% as_tibble() %>% ggplot(aes(x=V1, y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor() j = cbind(twoTensorData$E, result_nvec$Fac[[5]]) %>% as_tibble() %>% ggplot(aes(x=V1,y=V4)) + geom_point() + xlab(\"Simulated loadings\") + ylab(\"\") + stat_cor()  ggarrange(a,b,c,d,e,f,g,h,i,j, nrow=2, ncol=5)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Geert Roelof van der Ploeg. Author, maintainer.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van der Ploeg G (2024). CMTFtoolbox: Create (Advanced) Coupled Matrix Tensor Factorization models. R package version 0.0.0.9000, https://grvanderploeg.github.io/CMTFtoolbox/.","code":"@Manual{,   title = {CMTFtoolbox: Create (Advanced) Coupled Matrix and Tensor Factorization models},   author = {Geert Roelof {van der Ploeg}},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://grvanderploeg.github.io/CMTFtoolbox/}, }"},{"path":[]},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create (Advanced) Coupled Matrix and Tensor Factorization models","text":"CMTFtoolbox package provides R users two data fusion methods previously presented MATLAB sphere. cmtf_opt: Coupled Matrix Tensor Factorization (CMTF) described Acar et al., 2011. acmtf_opt: Advanced Coupled Matrix Tensor Factorization (ACMTF) described Acar et al., 2013 Acar et al., 2014. acmtfr_opt: ACMTF-regression, currently development. methods implemented using --optimization approaches described papers . implementation achieved using S4 Tensor object rTensor various conjugate gradient approaches mize. features package include: investigateFMS: Factor Match Score (FMS) based investigation selecting appropriate number components CMTF ACMTF. reinflateFac: reinflates data blocks based CMTF ACMTF model inspection residual calculation. reinflateTensor: reinflates tensor three matrices , B C. Jakobsen2025: three-block example dataset containing subject-linked longitudinal microbiome infant gut microbiome, mother milk microbiome mother milk metabolomics dataset. information can found Poulsen et al., 2022.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create (Advanced) Coupled Matrix and Tensor Factorization models","text":"can install development version CMTFtoolbox GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"GRvanderPloeg/CMTFtoolbox\")"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Create (Advanced) Coupled Matrix and Tensor Factorization models","text":"Please use following citation using package: van der Ploeg, G. R., F. White, Westerhuis, J., Heintz-Buschart, ., & Smilde, . (2024). ACMTF-R: multi-way data integration biological variation interest (manuscript preparation).","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Create (Advanced) Coupled Matrix and Tensor Factorization models","text":"","code":"library(CMTFtoolbox)  set.seed(123) numComponents = 3 I = 108 J = 100 K = 10 L = 100 A = array(rnorm(I*numComponents), c(I, numComponents))  # shared subject mode B = array(rnorm(J*numComponents), c(J, numComponents))  # distinct feature mode of X1 C = array(rnorm(K*numComponents), c(K, numComponents))  # distinct condition mode of X1 D = array(rnorm(L*numComponents), c(L, numComponents))  # distinct feature mode of X2 Y = matrix(A[,1]) lambdas = array(c(1, 1, 1, 0, 0, 1), c(2,3))  df1 = array(0L, c(I, J, K)) df2 = array(0L, c(I, L)) for(i in 1:numComponents){   df1 = df1 + lambdas[1,i] * reinflateTensor(A[,i], B[,i], C[,i])   df2 = df2 + lambdas[2,i] * reinflateMatrix(A[,i], D[,i]) } datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4)) Z = setupCMTFdata(datasets, modes, normalize=TRUE)  cmtf_model = cmtf_opt(Z, 3) acmtf_model = acmtf_opt(Z, 3) acmtfr_model = acmtfr_opt(Z, Y, 3)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/Jakobsen2025.html","id":null,"dir":"Reference","previous_headings":"","what":"Subject-linked longitudinal infant faecal microbiome, mother milk microbiome and mother milk metabolome. — Jakobsen2025","title":"Subject-linked longitudinal infant faecal microbiome, mother milk microbiome and mother milk metabolome. — Jakobsen2025","text":"subset MAINHEALTH project data.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/Jakobsen2025.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subject-linked longitudinal infant faecal microbiome, mother milk microbiome and mother milk metabolome. — Jakobsen2025","text":"","code":"Jakobsen2025"},{"path":[]},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/Jakobsen2025.html","id":"jakobsen-","dir":"Reference","previous_headings":"","what":"Jakobsen2025","title":"Subject-linked longitudinal infant faecal microbiome, mother milk microbiome and mother milk metabolome. — Jakobsen2025","text":"list object following information: Z Preprocessed prepared data object CMTF ACMTF modelling. homogenizedSubjectMetadata Homogenized subject metadata ordered rows data block Z. faecal_microbiome_taxonomy Taxonomy processed ASVs, ordered way columns block 1. milk_microbiome_taxonomy Taxonomy processed ASVs, ordered way columns block 2. milk_metabolites Metabolite names, ordered way columns block 3.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/Jakobsen2025.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Subject-linked longitudinal infant faecal microbiome, mother milk microbiome and mother milk metabolome. — Jakobsen2025","text":"https://bmjopen.bmj.com/content/12/11/e059552","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate function value of ACMTF — acmtf_fun","title":"Calculate function value of ACMTF — acmtf_fun","text":"Calculate function value ACMTF","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate function value of ACMTF — acmtf_fun","text":"","code":"acmtf_fun(   x,   Z,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08 )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate function value of ACMTF — acmtf_fun","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate function value of ACMTF — acmtf_fun","text":"Scalar loss function value.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate function value of ACMTF — acmtf_fun","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeACMTF(Z, 2, output=\"vect\") f = acmtf_fun(init, Z)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradient of ACMTF model. — acmtf_gradient","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"Calculate gradient ACMTF model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"","code":"acmtf_gradient(   x,   Z,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08 )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"Vectorized gradient ACMTF model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gradient of ACMTF model. — acmtf_gradient","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeACMTF(Z, 2, output=\"vect\") g = acmtf_gradient(init, Z)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Advanced coupled matrix and tensor factorizations — acmtf_opt","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"Advanced coupled matrix tensor factorizations","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"","code":"acmtf_opt(   Z,   numComponents,   initialization = \"random\",   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 10000,   abs_tol = 1e-10,   rel_tol = 1e-10,   grad_tol = 1e-10,   nstart = 1,   numCores = 1,   sortComponents = TRUE,   allOutput = FALSE )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"Z Combined dataset mode object produced setupCMTFdata(). numComponents Number components initialization Initialization, either \"random\" (default) \"nvec\" numComponents components concatenated data using svd. alpha Scalar penalizing components norm 1 (default 1). beta Vector penalty values dataset, penalizing lambda terms (default 1e-3). epsilon Scalar value make possible compute partial derivatives lambda (default 1e-8). cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. abs_tol Function tolerance criterion convergence. rel_tol Relative function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector. nstart Number models produce (default 1). set higher one, package return best fitted model. numCores Number cores use (default 1). set higher one, package attempt run parallel. sortComponents Sort components output descending order variation explained. allOutput Return created models. Ignored nstart=1.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"List object, similar mize::mize() output. Includes Fac object model, list components per mode. Also includes init object giving initialized input vectors.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtf_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Advanced coupled matrix and tensor factorizations — acmtf_opt","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  # specific setting to reduce runtime for CRAN model = acmtf_opt(Z, 1, rel_tol=1e-5, abs_tol=1e-5)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate function value of ACMTF — acmtfr_fun","title":"Calculate function value of ACMTF — acmtfr_fun","text":"Calculate function value ACMTF","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate function value of ACMTF — acmtfr_fun","text":"","code":"acmtfr_fun(   x,   Z,   Y,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5 )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate function value of ACMTF — acmtfr_fun","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). Y Dependent variable (regression part). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014 pi Pi value loss function specified Van der Ploeg et al., 2025.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate function value of ACMTF — acmtfr_fun","text":"Scalar loss function value.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate function value of ACMTF — acmtfr_fun","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE) Y = A[,1]  init = initializeACMTF(Z, 2, output=\"vect\") f = acmtfr_fun(init, Z, Y)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradient of ACMTF model. — acmtfr_gradient","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"Calculate gradient ACMTF model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"","code":"acmtfr_gradient(   x,   Z,   Y,   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5 )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata(). Y Dependent variable (regression part). alpha Alpha value loss function specified Acar et al., 2014 beta Beta value loss function specified Acar et al., 2014 epsilon Epsilon value loss function specified Acar et al., 2014 pi Pi value loss function specified Van der Ploeg et al., 2025.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"Vectorized gradient ACMTF regression model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gradient of ACMTF model. — acmtfr_gradient","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE) Y = A[,1]  init = initializeACMTF(Z, 2, output=\"vect\") g = acmtfr_gradient(init, Z, Y)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"Advanced coupled matrix tensor factorizations","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"","code":"acmtfr_opt(   Z,   Y,   numComponents,   initialization = \"random\",   alpha = 1,   beta = rep(0.001, length(Z$object)),   epsilon = 1e-08,   pi = 0.5,   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 10000,   abs_tol = 1e-10,   rel_tol = 1e-10,   grad_tol = 1e-10,   nstart = 1,   numCores = 1,   sortComponents = TRUE,   allOutput = FALSE )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"Z Combined dataset mode object produced setupCMTFdata(). Y Dependent variable (regression part). numComponents Number components initialization Initialization, either \"random\" (default) \"nvec\" numComponents components concatenated data using svd. Ignored uses NPLS based initialization pi=0. alpha Scalar penalizing components norm 1 (default 1). beta Vector penalty values dataset, penalizing lambda terms (default 1e-3). epsilon Scalar value make possible compute partial derivatives lambda (default 1e-8). pi Pi value loss function specified Van der Ploeg et al., 2025. cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. abs_tol Function tolerance criterion convergence. rel_tol Relative function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector. nstart Number models produce (default 1). set higher one, package return best fitted model. numCores Number cores use (default 1). set higher one, package attempt run parallel. sortComponents Sort components output descending order variation explained. allOutput Return created models. Ignored nstart=1.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"List object, similar mize::mize() output. Includes Fac object model, list components per mode. Also includes init object giving initialized input vectors.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/acmtfr_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Advanced coupled matrix and tensor factorizations — acmtfr_opt","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) Y = A[,1] datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  # specific setting to reduce runtime for CRAN model = acmtfr_opt(Z, Y, 2, rel_tol=1e-5, abs_tol=1e-5)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate function value of CMTF — cmtf_fun","title":"Calculate function value of CMTF — cmtf_fun","text":"Calculate function value CMTF","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate function value of CMTF — cmtf_fun","text":"","code":"cmtf_fun(x, Z)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate function value of CMTF — cmtf_fun","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata().","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate function value of CMTF — cmtf_fun","text":"Function value CMTF loss value.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate function value of CMTF — cmtf_fun","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeCMTF(Z, 2, output=\"vect\") f = cmtf_fun(init, Z)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gradient of CMTF model. — cmtf_gradient","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"Calculate gradient CMTF model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"","code":"cmtf_gradient(x, Z)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"x Vectorized parameters CMTF model. Z Z object generated setupCMTFdata().","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"Vectorized gradient CMTF model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gradient of CMTF model. — cmtf_gradient","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeCMTF(Z, 2, output=\"vect\") g = cmtf_gradient(init, Z)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Coupled matrix and tensor factorizations — cmtf_opt","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"Coupled matrix tensor factorizations","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"","code":"cmtf_opt(   Z,   numComponents,   initialization = \"random\",   cg_update = \"HS\",   line_search = \"MT\",   max_iter = 10000,   max_fn = 10000,   abs_tol = 1e-08,   rel_tol = 1e-08,   grad_tol = 1e-08,   nstart = 1,   numCores = 1,   sortComponents = TRUE,   allOutput = FALSE )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"Z Combined dataset mode object produced setupCMTFdata(). numComponents Number components initialization Initialization, either \"random\" (default) \"nvec\" numComponents components concatenated data using svd. cg_update Update method conjugate gradient algorithm, see mize::mize() options (default=\"HS\", Hestenes-Steifel). line_search Line search algorithm use, see mize::mize() options (default=\"MT\", -Thuente). max_iter Maximum number iterations. max_fn Maximum number function evaluations. abs_tol Function tolerance criterion convergence. rel_tol Relative function tolerance criterion convergence. grad_tol Absolute tolerence l2-norm gradient vector. nstart Number models produce (default 1). set higher one, package return best fitted model. numCores Number cores use (default 1). set higher one, package attempt run parallel. sortComponents Sort components output descending order variation explained. allOutput Return created models. Ignored nstart=1.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"List object, similar mize::mize() output. Includes Fac object model, list components per mode. Also includes init object giving initialized input vectors.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/cmtf_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coupled matrix and tensor factorizations — cmtf_opt","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  model = cmtf_opt(Z, 1, rel_tol=1e-4) # quick convergence for example only"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/computeFMS.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Factor Match Score for two models. — computeFMS","title":"Compute Factor Match Score for two models. — computeFMS","text":"Compute Factor Match Score two models.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/computeFMS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Factor Match Score for two models. — computeFMS","text":"","code":"computeFMS(Fac1, Fac2, modes)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/computeFMS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Factor Match Score for two models. — computeFMS","text":"Fac1 list matrices corresponding found components per mode model 1. Fac2 list matrices corresponding found components per mode model 2. modes List modes per dataset.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/computeFMS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Factor Match Score for two models. — computeFMS","text":"Vector FMS scores, one per dataset.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/computeFMS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Factor Match Score for two models. — computeFMS","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100, 2)) E = array(rnorm(10*2), c(10, 2))  Fac1 = list(A,B,C,D,E) Fac2 = Fac1 # identical models for the purposes of demonstration modes = list(c(1,2,3), c(1,4,5)) FMS_result = computeFMS(Fac1, Fac2, modes) # FMS_result = c(1,1)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/fac_to_vect.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorize Fac object — fac_to_vect","title":"Vectorize Fac object — fac_to_vect","text":"Vectorize Fac object","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/fac_to_vect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorize Fac object — fac_to_vect","text":"","code":"fac_to_vect(Fac)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/fac_to_vect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorize Fac object — fac_to_vect","text":"Fac Fac object CMTF ACMTF","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/fac_to_vect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorize Fac object — fac_to_vect","text":"Vectorized Fac object","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/fac_to_vect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorize Fac object — fac_to_vect","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2)) Fac = list(A, B, C, D, E) v = fac_to_vect(Fac)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeACMTF.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"Initialize input vectors ACMTF algorithm","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeACMTF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"","code":"initializeACMTF(   Z,   numComponents,   initialization = \"random\",   output = \"Fac\",   Y = NULL )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeACMTF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"Z List object generated setupCMTFdata(). numComponents Integer stating number desired components CMTF model. initialization Initialization method, either \"random\" \"nvec\" (default \"random\"). Random initialize random input vectors. Nvec initialize vectors according singular value decomposition (matricized, needed) concatenated datasets per mode. output return output: \"Fac\" object (default) vectorized (\"vect\"). Y Used dependent variable initialization set \"npls\". used default.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeACMTF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"List vector initialized input vectors per mode.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeACMTF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize input vectors for the ACMTF algorithm — initializeACMTF","text":"","code":"A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeACMTF(Z, 2)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeCMTF.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize input vectors for the CMTF algorithm — initializeCMTF","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"Initialize input vectors CMTF algorithm","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeCMTF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"","code":"initializeCMTF(   Z,   numComponents,   initialization = \"random\",   output = \"Fac\",   Y = NULL )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeCMTF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"Z List object generated setupCMTFdata(). numComponents Integer stating number desired components CMTF model. initialization Initialization method, either \"random\" \"nvec\" (default \"random\"). Random initialize random input vectors. Nvec initialize vectors according singular value decomposition (matricized, needed) concatenated datasets per mode. output return output: \"Fac\" object (default) vectorized (\"vect\"). Y Used dependent variable initialization set \"npls\". used default.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeCMTF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"List vector initialized input vectors per mode.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/initializeCMTF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize input vectors for the CMTF algorithm — initializeCMTF","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  init = initializeCMTF(Z, 1)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/investigateFMS.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor Match Score (FMS) for model selection — investigateFMS","title":"Factor Match Score (FMS) for model selection — investigateFMS","text":"Factor Match Score (FMS) model selection","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/investigateFMS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor Match Score (FMS) for model selection — investigateFMS","text":"","code":"investigateFMS(   datasets,   modes,   sharedMode,   model = \"acmtf\",   minNumComponents = 1,   maxNumComponents = 3,   numFolds = 10,   jackKnife = FALSE,   numCores = 1,   max_iter = 10000,   max_fn = 1e+05,   rel_tol = 1e-08,   abs_tol = 1e-08 )"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/investigateFMS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor Match Score (FMS) for model selection — investigateFMS","text":"datasets List arrays datasets. Multi-way two-way may combined. modes Numbered modes per dataset list. Example element 1: 1 2 3 element 2: 1 4 X tensor Y matrix case shared subject mode. sharedMode Mode shared blocks, used remove fibers numFolds randomly initialized models. model Model type run, either \"acmtf\" \"cmtf\" (default \"acmtf\"). minNumComponents Minimum number components check (default 1). maxNumComponents Maximum number components check (default 3). numFolds Number randomly initialized models create (default 10). jackKnife Jack-knife samples instead removing multiple samples per fold (default FALSE). numCores Number cores use (default 1). number higher 1 run process parallel. max_iter Maximum number iterations. max_fn Maximum number function evaluations. rel_tol Relative function tolerance criterion convergence. abs_tol Function tolerance criterion convergence.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/investigateFMS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor Match Score (FMS) for model selection — investigateFMS","text":"List containing \"FMS\" resulting pairwise comparisons models per number components \"plot\" overview plot.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/investigateFMS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor Match Score (FMS) for model selection — investigateFMS","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5))  # specific setting to reduce runtime for CRAN result = investigateFMS(datasets, modes, 1, model=\"acmtf\", numFolds=2, rel_tol=1e-4, abs_tol=1e-4)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/normalizeFac.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"Normalize vectors model output Fac object norm 1.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/normalizeFac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"","code":"normalizeFac(Fac, modes)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/normalizeFac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"Fac List object components per mode per item. modes List object modes per dataset (see also setupCMTFdata())","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/normalizeFac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"List object normalized Fac object, extracted norms per loading vector per component, norms per dataset per component.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/normalizeFac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize all vectors in model output Fac object to norm 1. — normalizeFac","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2)) modes = list(c(1,2,3), c(1,4,5))  Fac = list(A, B, C, D, E) output = normalizeFac(Fac, modes)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateFac.html","id":null,"dir":"Reference","previous_headings":"","what":"Reinflate all datablocks from a model Fac object. — reinflateFac","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"Basically wrapper function reinflateTensor() reinflateMatrix().","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateFac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"","code":"reinflateFac(Fac, Z, returnAsTensor = FALSE)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateFac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"Fac Fac object output CMTF ACMTF Z Z object generated setupCMTFdata(). returnAsTensor Boolean return data blocks rTensor tensor objects (default FALSE)","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateFac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"List data blocks","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateFac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reinflate all datablocks from a model Fac object. — reinflateFac","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  result = cmtf_opt(Z, 1, max_iter=2) Xhats = reinflateFac(result$Fac, Z)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"Create matrix matrix scores loadings similar component model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"","code":"reinflateMatrix(A, B)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"x N matrix corresponding scores N components. B J x N matrix corresponding loadings N components.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"M, x J matrix.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a matrix from a matrix of scores and loadings similar to a component model. — reinflateMatrix","text":"","code":"A = rnorm(108) B = rnorm(100) M = reinflateMatrix(A,B)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateTensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"Create tensor set matrices similar component model.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateTensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"","code":"reinflateTensor(A, B, C)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateTensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"x N matrix corresponding loadings first mode N components. B J x N matrix corresponding loadings second mode N components. C K x N matrix corresponding loadings third mode N components.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateTensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"M, x J x K tensor.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/reinflateTensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tensor out of a set of matrices similar to a component model. — reinflateTensor","text":"","code":"A = rnorm(108) B = rnorm(100) C = rnorm(10) M = reinflateTensor(A,B,C)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/removeTwoNormCol.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove two-norms column-wise from a matrix — removeTwoNormCol","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"Remove two-norms column-wise matrix","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/removeTwoNormCol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"","code":"removeTwoNormCol(df)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/removeTwoNormCol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"df Matrix loadings","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/removeTwoNormCol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"Matrix loadings column-wise 2-norm 1.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/removeTwoNormCol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove two-norms column-wise from a matrix — removeTwoNormCol","text":"","code":"A = array(rnorm(108*4), c(108,4)) Anorm = removeTwoNormCol(A)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/setupCMTFdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up datasets for (A)CMTF input — setupCMTFdata","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"Set datasets ()CMTF input","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/setupCMTFdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"","code":"setupCMTFdata(datasets, modes, normalize = TRUE)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/setupCMTFdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"datasets List arrays datasets. Multi-way two-way may combined. modes Numbered modes per dataset list. Example element 1: 1 2 3 element 2: 1 4 X tensor Y matrix case shared subject mode. normalize Boolean specifying datasets normalized Frobenium norm 1. Note: function puts zeroes positions missing values. indices missing data conserved output.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/setupCMTFdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"Z, list \"object\" listing datasets, \"sizes\" size, \"norms\" norms \"missing\" stating missing data.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/setupCMTFdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up datasets for (A)CMTF input — setupCMTFdata","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/vect_to_fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"Convert vectorized output ()cmtf Fac list object loadings per mode.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/vect_to_fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"","code":"vect_to_fac(vect, Z, sortComponents = FALSE)"},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/vect_to_fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"vect Vectorized output ()cmtf Z Original Z input object (see setupCMTFdata). sortComponents Sort order components variation explained (default FALSE).","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/vect_to_fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"Fac: list object loadings components per mode, ordered way Z$modes.","code":""},{"path":"https://grvanderploeg.github.io/CMTFtoolbox/reference/vect_to_fac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert vectorized output of (a)cmtf to a Fac list object with all loadings per mode. — vect_to_fac","text":"","code":"set.seed(123) A = array(rnorm(108*2), c(108, 2)) B = array(rnorm(100*2), c(100, 2)) C = array(rnorm(10*2), c(10, 2)) D = array(rnorm(100*2), c(100,2)) E = array(rnorm(10*2), c(10,2))  df1 = reinflateTensor(A, B, C) df2 = reinflateTensor(A, D, E) datasets = list(df1, df2) modes = list(c(1,2,3), c(1,4,5)) Z = setupCMTFdata(datasets, modes, normalize=FALSE)  result = cmtf_opt(Z, 2, initialization=\"random\", max_iter = 2) Fac = vect_to_fac(result$par, Z)"}]
